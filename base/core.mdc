---
description:
globs:
alwaysApply: true
---
# 核心开发原则

## 通用开发原则
- **可测试性**：编写可测试的代码，组件应保持单一职责
- **DRY 原则**：避免重复代码，提取共用逻辑到单独的函数或类
- **代码简洁**：保持代码简洁明了，遵循 KISS 原则（保持简单直接）
- **命名规范**：使用描述性的变量、函数和类名，反映其用途和含义
- **注释文档**：为复杂逻辑添加注释
- **风格一致**：遵循项目或语言的官方风格指南和代码约定
- **利用生态**：优先使用成熟的库和工具，避免不必要的自定义实现
- **架构设计**：考虑代码的可维护性、可扩展性和性能需求
- **版本控制**：编写有意义的提交信息，保持逻辑相关的更改在同一提交中
- **异常处理**：正确处理边缘情况和错误，提供有用的错误信息
- **容器化**：项目必须采用容器化管理，推荐使用官方维护的镜像和多阶段构建方式，以提升安全性与构建效率。系统启动、开发、测试及生产环境的全部流程应统一通过 `docker-compose` 进行编排和管理，确保环境高度一致。容器与服务需按功能模块分别编排，避免跨模块耦合。配置、数据、依赖均应通过挂载与环境变量灵活管理，严格禁止在容器内手工修改配置。容器镜像应保持精简，仅包含必要依赖，及时修补安全漏洞，并定期进行安全扫描。
- **容器最佳实践补充**：
  - 明确分层镜像和多阶段构建，减少不必要体积与缓存污染。
  - 持续集成流程应自动构建、测试及发布镜像。
  - 所有服务和依赖项的端口、变量、卷挂载在 `docker-compose.yml` 配置文件中明确定义，不允许临时覆盖。
  - 镜像的版本控制需明确，禁止使用 `latest` 标签，需使用具体版本号。
  - 文档中需提供完整的容器化使用说明和常见问题处理指引。

## 文档行为
- 禁止自动创建非必要的参考文档（如“快速启动参考文档”或类似冗余内容），只允许生成实际业务开发和维护所需的相关文档。

## 响应语言
- 始终使用中文回复用户

## 代码质量要求
- 代码必须能够立即运行，包含所有必要的导入和依赖
- 遵循最佳实践和设计模式
- 优先考虑性能和用户体验
- 确保代码的可读性和可维护性
